mixin checkbox(options)
  .checkbox
    -
      let isExpandable = options.expandable === true;
      let isRich = options.rich === true;
      let listAttrs = {
        ...(isExpandable && {class: 'checkbox__list_expandable'}),
        ...(options.expanded === true && {class: 'checkbox__list_expandable checkbox__list_visible'})
      };
      let arrowAttrs = {
        ...(options.expanded === true && {class: 'checkbox__arrow_rotate'})
      };
      let labelAttrs = {
        ...(isRich && {class: 'checkbox__label_rich'})
      };
      let hintAttrs = {
        ...(isRich && {class: 'checkbox__hint_rich'})
      };

    if (isExpandable)
      .checkbox__shell(tabindex='0')
        .checkbox__title.unselect #{options.title}
        .checkbox__arrow.material-icons.unselect&attributes(arrowAttrs) expand_more
    else
      .checkbox__title
        h3 #{options.title}

    .checkbox__list&attributes(listAttrs)
      - for (let item of options.items)
        -
          let fieldAttrs = {
            ...(item.checked === true && {checked: true})
          };

        label.checkbox__block.unselect 
          .checkbox__labels
            .checkbox__label&attributes(labelAttrs) #{item.text}
            if item.hint
              .checkbox__hint&attributes(hintAttrs)
                - for (let text of item.hint.split('/br'))
                  p #{text}
          .checkbox__fields
            input.checkbox__field.checkbox__field_hidden(type='checkbox' tabindex='0')&attributes(fieldAttrs)
            .checkbox__field.checkbox__field_visible.unselect
            svg.checkbox__flag(width=20 height=20)
              defs
                linearGradient#checkbox__gradient.checkbox__gradient(x1="0%" y1="0%" x2="0%" y2="100%")
                  stop(offset='0%')
                  stop(offset='100%')
              polyline(points="7 14 13 14 13 6" stroke="url(#checkbox__gradient)" stroke-width="2" stroke-linecap="butt" stroke-linejoin="miter" fill='none')
